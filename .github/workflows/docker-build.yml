name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: joewalters/photo-uploader

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Generate timestamp
      id: timestamp
      run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.timestamp.outputs.timestamp }},enable={{is_default_branch}}
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILD_DATE=${{ steps.timestamp.outputs.timestamp }}

    - name: Test Docker image
      if: github.event_name != 'pull_request'
      run: |
        # Create test directories with proper permissions
        mkdir -p /tmp/test-config /tmp/test-uploads
        chmod 755 /tmp/test-config /tmp/test-uploads
        
        # Create a basic config file for testing
        cat > /tmp/test-config/config.json << EOF
        {
          "server": {"host": "0.0.0.0", "port": 5001, "debug": false},
          "upload": {"folder": "/app/uploads", "max_file_size_mb": 10, "allowed_extensions": ["jpg", "png"]},
          "image_processing": {"max_width": 1920, "max_height": 1080, "auto_rotate": true, "optimize": true, "quality": 85}
        }
        EOF
        
        # Start container
        docker run --rm -d --name test-container \
          -p 5001:5001 \
          -v /tmp/test-config:/app/config \
          -v /tmp/test-uploads:/app/uploads \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        
        # Wait for container to be healthy (max 60 seconds)
        echo "Waiting for container to start..."
        for i in {1..60}; do
          if curl -f -s http://localhost:5001 > /dev/null 2>&1; then
            echo "Container is healthy after $i seconds"
            break
          fi
          if [ $i -eq 60 ]; then
            echo "Container failed to start within 60 seconds"
            docker logs test-container
            docker stop test-container
            exit 1
          fi
          sleep 1
        done
        
        # Test endpoints
        echo "Testing main page..."
        curl -f http://localhost:5001
        
        echo "Testing version endpoint..."
        curl -f http://localhost:5001/version
        
        echo "All tests passed!"
        
        # Stop test container
        docker stop test-container

    - name: Image digest
      if: github.event_name != 'pull_request'
      run: echo ${{ steps.build.outputs.digest }}